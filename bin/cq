#!/bin/bash
# cq - Claude Query: Ask Claude to write SQL, then automatically execute it
# This creates the ultimate learning loop: Claude writes queries about Claude usage!

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Configuration
SNOW_CMD="${SNOW_CMD:-/Library/Frameworks/Python.framework/Versions/3.12/bin/snow}"
# Use the account identifier from config, not the account name
SNOW_ACCOUNT_ID="${SNOW_ACCOUNT_ID:-yshmxno-fbc56289}"
SNOW_REGION="${SNOW_REGION:-us-east-1}"

# Function to extract SQL from Claude's response
extract_sql() {
    local output="$1"
    # Look for SQL patterns - handle both ```sql blocks and inline SELECT statements
    echo "$output" | awk '
        /```sql/,/```/ {
            if (!/```/) print
        }
        /^SELECT|^WITH|^CREATE|^INSERT|^UPDATE|^DELETE/ {
            printing = 1
        }
        printing && /;$/ {
            print
            printing = 0
        }
        printing {
            print
        }
    ' | grep -v "^\`\`\`" | head -50
}

# Function to validate SQL (basic safety check)
validate_sql() {
    local query="$1"
    # Block dangerous operations
    if echo "$query" | grep -iE "DROP|TRUNCATE|DELETE.*FROM|UPDATE.*SET" > /dev/null; then
        echo -e "${YELLOW}⚠️  Query contains potentially dangerous operations. Skipping execution.${NC}" >&2
        return 1
    fi
    return 0
}

# Main function
main() {
    local prompt="$*"
    
    if [ -z "$prompt" ]; then
        echo "Usage: cq <question about your data>"
        echo "Example: cq 'show me my orphaned Claude sessions'"
        exit 1
    fi
    
    echo -e "${BLUE}🤖 Asking Claude to write a query...${NC}"
    echo -e "${PURPLE}Prompt: $prompt${NC}"
    echo ""
    
    # Load comprehensive context if available
    CONTEXT_FILE="$(dirname $0)/../contexts/cq_context.md"
    if [ -f "$CONTEXT_FILE" ]; then
        CONTEXT=$(cat "$CONTEXT_FILE")
    else
        CONTEXT="Context: We have these tables and views in CLAUDE_LOGS.ACTIVITIES:
- ACTIVITY_STREAM: Main event table with columns (activity_id, ts, activity, customer, feature_json)
- V_LEARNING_ORPHANED_SESSIONS: Shows sessions without end events
- V_META_LEARNING: Shows sessions studying the system itself
- V_SYSTEM_EVOLUTION: Tracks system maturity over time
- V_EXECUTIVE_SUMMARY: High-level metrics"
    fi
    
    # Add context to help Claude write better queries
    ENHANCED_PROMPT="Write a Snowflake SQL query for this request: $prompt

$CONTEXT

Based on the context above, write the most appropriate SQL query. Return ONLY the SQL query, no explanation needed."
    
    # Run Claude and capture output
    echo -e "${BLUE}Running Claude...${NC}"
    OUTPUT=$(claude -p "$ENHANCED_PROMPT" 2>&1)
    
    # Show Claude's full response
    echo -e "${GREEN}Claude's Response:${NC}"
    echo "$OUTPUT"
    echo ""
    
    # Extract SQL query
    QUERY=$(extract_sql "$OUTPUT")
    
    if [ -n "$QUERY" ]; then
        echo -e "${GREEN}📝 Extracted Query:${NC}"
        echo "$QUERY"
        echo ""
        
        # Validate query
        if ! validate_sql "$QUERY"; then
            exit 1
        fi
        
        # Log this meta-query to Snowflake!
        SESSION_ID="cq-$(date +%s)-$$"
        $SNOW_CMD sql -c poc -q "
        INSERT INTO CLAUDE_LOGS.ACTIVITIES.ACTIVITY_STREAM (
            activity_id, ts, activity, customer, anonymous_customer_id, feature_json
        ) VALUES (
            '$(uuidgen 2>/dev/null || echo "cq-$(date +%s)")',
            CURRENT_TIMESTAMP(),
            'claude_meta_query',
            '$SESSION_ID',
            '$(hostname)',
            OBJECT_CONSTRUCT(
                'prompt', '$(echo "$prompt" | sed "s/'/''/g")',
                'query_generated', '$(echo "$QUERY" | sed "s/'/''/g" | head -c 1000)',
                'timestamp', CURRENT_TIMESTAMP()::STRING
            )
        );" 2>/dev/null || true
        
        # Execute the query
        echo -e "${BLUE}🚀 Executing query...${NC}"
        echo ""
        
        # Run with nice formatting
        RESULT=$($SNOW_CMD sql -c poc -q "$QUERY" --format table 2>&1)
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}📊 Query Results:${NC}"
            echo "$RESULT"
            
            # Generate Snowsight URL
            if command -v python3 > /dev/null; then
                ENCODED=$(echo "$QUERY" | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip()))")
                # Use the Classic Console format that works
                SNOW_URL="https://${SNOW_ACCOUNT_ID}.snowflakecomputing.com/console#/worksheet?query=${ENCODED}"
                echo ""
                echo -e "${BLUE}🌐 Open in Snowflake (Classic Console):${NC}"
                echo "$SNOW_URL"
                echo ""
                echo -e "${YELLOW}Note: You'll need to log in first if not already authenticated${NC}"
                
                # Try to open in browser (macOS)
                if [[ "$OSTYPE" == "darwin"* ]]; then
                    read -p "Open in browser? (y/n) " -n 1 -r
                    echo
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        open "$SNOW_URL"
                    fi
                fi
            fi
        else
            echo -e "${YELLOW}⚠️  Query execution failed:${NC}"
            echo "$RESULT"
        fi
        
        # Learning moment
        echo ""
        echo -e "${PURPLE}═══════════════════════════════════════════════════════${NC}"
        echo -e "${PURPLE}🎓 Learning Moment:${NC}"
        echo -e "You just used Claude to query Claude's usage of Claude!"
        echo -e "This meta-query was logged as activity type: 'claude_meta_query'"
        echo -e "${PURPLE}═══════════════════════════════════════════════════════${NC}"
        
    else
        echo -e "${YELLOW}⚠️  No SQL query found in Claude's response${NC}"
        echo "Try being more specific about what data you want to see."
    fi
}

# Show help if no arguments
if [ $# -eq 0 ]; then
    cat << EOF
${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}
${PURPLE}     Claude Query (cq) - Natural Language SQL      ${NC}
${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}

Ask Claude to write and execute Snowflake queries about your Claude usage!

${GREEN}Usage:${NC}
  cq "your question about the data"

${GREEN}Examples:${NC}
  cq "show me my orphaned sessions"
  cq "what are the top 10 most active sessions?"
  cq "how many activities were logged today?"
  cq "which projects use Claude the most?"
  cq "analyze the pattern of Claude usage by hour"

${GREEN}Available Views:${NC}
  - V_LEARNING_ORPHANED_SESSIONS (orphan problem)
  - V_META_LEARNING (recursive learning)
  - V_SYSTEM_EVOLUTION (system growth)
  - V_EXECUTIVE_SUMMARY (high-level metrics)

${PURPLE}This creates the ultimate meta-learning loop:${NC}
  You ask → Claude writes SQL → Query executes → Results logged → Query your queries!

EOF
    exit 0
fi

# Run main function with all arguments
main "$@"