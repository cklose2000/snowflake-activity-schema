#!/bin/bash
# my-claude-journey - Personal analytics for your Claude learning path

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Find snow CLI
if command -v snow &> /dev/null; then
    SNOW_CMD="snow"
elif [ -x "/Library/Frameworks/Python.framework/Versions/3.12/bin/snow" ]; then
    SNOW_CMD="/Library/Frameworks/Python.framework/Versions/3.12/bin/snow"
else
    echo "❌ Snow CLI not found"
    exit 1
fi

clear
echo -e "${PURPLE}═══════════════════════════════════════════════════════${NC}"
echo -e "${PURPLE}        🎓 Your Claude Learning Journey 🎓              ${NC}"
echo -e "${PURPLE}═══════════════════════════════════════════════════════${NC}"
echo ""

# Get personal stats
echo -e "${BLUE}📊 Your Personal Statistics:${NC}"
$SNOW_CMD sql -c poc -q "
SELECT 
    COUNT(DISTINCT customer) as sessions_started,
    COUNT(DISTINCT DATE(ts)) as days_active,
    COUNT(*) as total_activities,
    MAX(ts)::DATE as last_active
FROM CLAUDE_LOGS.ACTIVITIES.ACTIVITY_STREAM 
WHERE anonymous_customer_id = '$(hostname)'
    AND activity LIKE 'claude_%';" 2>/dev/null

echo ""
echo -e "${GREEN}🔍 Your Session Patterns:${NC}"
$SNOW_CMD sql -c poc -q "
WITH your_sessions AS (
    SELECT 
        customer as session_id,
        MIN(ts) as start_time,
        MAX(ts) as end_time,
        COUNT(*) as activity_count,
        MAX(feature_json:project_path::STRING) as project
    FROM CLAUDE_LOGS.ACTIVITIES.ACTIVITY_STREAM 
    WHERE anonymous_customer_id = '$(hostname)'
        AND activity LIKE 'claude_%'
    GROUP BY customer
    ORDER BY start_time DESC
    LIMIT 5
)
SELECT 
    session_id,
    start_time,
    DATEDIFF('minute', start_time, COALESCE(end_time, CURRENT_TIMESTAMP())) as duration_mins,
    activity_count,
    SUBSTR(project, -30) as project_name
FROM your_sessions;" 2>/dev/null

echo ""
echo -e "${YELLOW}🎯 Learning Challenges:${NC}"
echo ""

# Check orphaned sessions
ORPHAN_COUNT=$($SNOW_CMD sql -c poc -q "
SELECT COUNT(*) 
FROM (
    SELECT customer, 
           MAX(CASE WHEN activity = 'claude_session_end' THEN 1 ELSE 0 END) as has_end
    FROM CLAUDE_LOGS.ACTIVITIES.ACTIVITY_STREAM 
    WHERE anonymous_customer_id = '$(hostname)'
        AND activity LIKE 'claude_session%'
    GROUP BY customer
) WHERE has_end = 0;" --format csv 2>/dev/null | tail -1)

echo -e "  ${YELLOW}❓ Challenge 1: Orphaned Sessions${NC}"
echo -e "     You have ${PURPLE}$ORPHAN_COUNT${NC} orphaned sessions (no end event)"
echo -e "     💡 Why do you think this happens?"
echo ""

# Check meta-learning
META_COUNT=$($SNOW_CMD sql -c poc -q "
SELECT COUNT(DISTINCT customer)
FROM CLAUDE_LOGS.ACTIVITIES.ACTIVITY_STREAM 
WHERE anonymous_customer_id = '$(hostname)'
    AND feature_json:project_path::STRING LIKE '%snowflake-activity-schema%';" --format csv 2>/dev/null | tail -1)

echo -e "  ${YELLOW}🔄 Challenge 2: Meta-Learning${NC}"
echo -e "     You've had ${PURPLE}$META_COUNT${NC} sessions studying this system itself!"
echo -e "     💡 Can you query your own queries?"
echo ""

echo -e "  ${YELLOW}📝 Challenge 3: Write Your Own Query${NC}"
echo -e "     Try: Find your longest Claude session"
echo -e "     Hint: Use DATEDIFF and GROUP BY customer"
echo ""

echo -e "${GREEN}═══════════════════════════════════════════════════════${NC}"
echo -e "${GREEN}🎓 Your Learning Level:${NC}"

# Determine learning level
if [ "$META_COUNT" -gt 5 ]; then
    echo -e "     ${PURPLE}🏆 ActivitySchema Expert!${NC}"
    echo -e "     You're studying the system that studies the system!"
elif [ "$META_COUNT" -gt 2 ]; then
    echo -e "     ${BLUE}📈 Advanced Learner${NC}"
    echo -e "     You're beginning to see the patterns!"
elif [ "$ORPHAN_COUNT" -gt 0 ]; then
    echo -e "     ${GREEN}🌱 Pattern Discoverer${NC}"
    echo -e "     You've found the orphan problem!"
else
    echo -e "     ${YELLOW}🚀 Ready to Begin${NC}"
    echo -e "     Start exploring the views!"
fi

echo -e "${GREEN}═══════════════════════════════════════════════════════${NC}"
echo ""
echo -e "${BLUE}📚 Next Steps:${NC}"
echo "  1. Query: SELECT * FROM CLAUDE_LOGS.ACTIVITIES.V_LEARNING_ORPHANED_SESSIONS;"
echo "  2. Query: SELECT * FROM CLAUDE_LOGS.ACTIVITIES.V_META_LEARNING;"
echo "  3. Use Claude to analyze your own usage patterns"
echo "  4. Help improve the logging system!"
echo ""